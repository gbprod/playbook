{"version":3,"sources":["data/songs lazy /^/.//.*/.json$/ groupOptions: {} namespace object","components/Layout.tsx","components/Navbar.tsx","components/SongList.tsx","components/Header.tsx","components/Bar.tsx","components/Phrase.tsx","components/ChordGrid.tsx","components/Notes.tsx","components/Lyrics.tsx","components/ChordSchemas.tsx","components/References.tsx","components/Actions.tsx","components/Song.tsx","containers/actions.ts","containers/SongListContainer.tsx","containers/SongContainer.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","Layout","children","Navbar","fixedToTop","to","SongList","songs","sort","a","b","title","localeCompare","artist","song","key","Header","capo","Bar","bar","defaultBeats","chords","starts","forEach","chord","push","className","beats","name","Phrase","phrase","bars","index","ChordGrid","grid","phrases","Notes","text","line","Fragment","Lyrics","fontSize","style","paragraphe","ChordSchemas","schemas","schema","frets","References","references","reference","href","target","rel","Actions","settings","onUpdate","menu","icon","minimal","small","onClick","lyricsFontSize","content","position","Position","LEFT_TOP","Song","useState","setSettings","newSettings","console","log","lyrics","notes","loadSongs","default","loadSong","SongListContainer","setSongs","useEffect","values","SongContainer","setSong","useParams","Router","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2JAAA,IAAIA,EAAM,CACT,eAAgB,CACf,IACA,GAED,eAAgB,CACf,IACA,GAED,kBAAmB,CAClB,IACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBU,EAAED,EAAI,MAGnCX,EAAoBa,KAAO,WAC1B,OAAOC,OAAOD,KAAKd,IAEpBC,EAAoBW,GAAK,IACzBI,EAAOC,QAAUhB,G,qGC7BJiB,EAAgD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAC3D,6BACE,kBAAC,EAAD,MACCA,I,SCEQC,EAAuB,WAClC,OACE,kBAAC,IAAD,CAAYC,YAAU,GACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,iBCRGC,EAA2C,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzD,OACE,kBAAC,IAAD,KACGA,EACEC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAMC,cAAcF,EAAEG,WACvC9B,KAAI,SAAC+B,EAAMC,GAAP,OACH,wBAAIA,IAAKA,GACP,kBAAC,IAAD,CAAMV,GAAE,eAAUS,EAAKnB,KAAOmB,EAAKH,a,QCJlCK,EAAgC,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAH,OAC3C,oCACE,kBAAC,IAAD,KACGA,EAAKH,MADR,MACkBG,EAAKD,QAEtBC,EAAKG,MAAQ,kBAAC,IAAD,aAAWH,EAAKG,QCcnBC,EAnBwB,SAAC,GAA2B,IAAD,EAAxBC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,aACzCC,EAA6B,GAC7BC,EAAS,EAcb,OAZAH,EAAIE,OAAOE,SAAQ,SAACC,GAClBH,EAAOI,KACL,yBACEV,IAAKO,EACLI,UAAS,2BAAsBJ,EAAtB,kBAAsCE,EAAMG,QAErD,0BAAMD,UAAU,SAASF,EAAMI,QAGnCN,GAAUE,EAAMG,SAGX,yBAAKD,UAAS,4BAAaP,EAAIQ,aAAjB,QAA0BP,IAAiBC,ICfrDQ,EAAgC,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAC3C,oCACE,kBAAC,IAAD,KAAKA,EAAOF,MACZ,yBAAKF,UAAU,UACZI,EAAOC,KAAKhD,KAAI,SAAUoC,EAAKa,GAC9B,OAAO,kBAAC,EAAD,CAAKZ,aAAcU,EAAOH,MAAOR,IAAKA,EAAKJ,IAAKiB,UCNlDC,EAAsC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjD,yBAAKR,UAAU,cACZQ,EAAKC,QAAQpD,KAAI,SAAC+C,EAAQf,GAAT,OAChB,kBAAC,EAAD,CAAQe,OAAQA,EAAQf,IAAKA,SCJtBqB,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACzC,yBAAKX,UAAU,SACb,kBAAC,IAAD,cACCW,EAAKtD,KAAI,SAACuD,EAAMN,GAAP,OACR,kBAAC,IAAMO,SAAP,CAAgBxB,IAAKiB,GAClBM,EACD,mCCJKE,G,OAAgC,SAAC,GAAD,IAAGH,EAAH,EAAGA,KAAMI,EAAT,EAASA,SAAT,OAC3C,6BACE,kBAAC,IAAD,gBACA,yBAAKf,UAAU,SAASgB,MAAO,CAAED,SAAS,GAAD,OAAKA,EAAL,QACtCJ,EAAKtD,KAAI,SAAC4D,EAAYX,GAAb,OACR,uBAAGjB,IAAKiB,GACLW,EAAW5D,KAAI,SAACuD,EAAMN,GAAP,OACd,kBAAC,IAAMO,SAAP,CAAgBxB,IAAKiB,GAClBM,EACD,yCCVDM,EAA4C,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACvD,6BACE,kBAAC,IAAD,gBACA,6BACGA,EAAQ9D,KAAI,SAAC+D,EAAQd,GAAT,OACX,yBAAKjB,IAAKiB,GACPc,EAAOlB,KADV,MACmBkB,EAAOC,aCPrBC,EAAwC,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACnD,6BACE,kBAAC,IAAD,yBACA,4BACGA,EAAWlE,KAAI,SAAUmE,EAAWlB,GACnC,OACE,wBAAIjB,IAAKiB,GACP,uBAAGmB,KAAMD,EAAWE,OAAO,SAASC,IAAI,uBACrCH,U,wBCAFI,EAAkC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACpDC,EACJ,kBAAC,IAAD,CAAS9C,MAAM,iBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE+C,KAAK,QACLC,SAAO,EACPC,OAAK,EACLC,QAAS,kBACPL,EAAS,eACJD,EADG,CAENO,eAAgBP,EAASO,eAAiB,QAIhD,kBAAC,IAAD,CACEJ,KAAK,OACLC,SAAO,EACPC,OAAK,EACLC,QAAS,kBACPL,EAAS,eACJD,EADG,CAENO,eAAgBP,EAASO,eAAiB,SApBpD,kBA6BF,OACE,kBAAC,IAAD,CAASC,QAASN,EAAMO,SAAUC,IAASC,UACzC,kBAAC,IAAD,CAAQP,SAAO,EAACD,KAAK,UC7BdS,EAA4B,SAAC,GAAc,IAAZrD,EAAW,EAAXA,KAAW,EACrBsD,mBAAuB,CACrDN,eAAgB,KAFmC,mBAC9CP,EAD8C,KACpCc,EADoC,KAUrD,OACE,yBAAK3C,UAAU,WACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAS6B,SAAUA,EAAUC,SARlB,SAACc,GAChBC,QAAQC,IAAIjB,EAASO,gBACrBO,EAAYC,OAQV,gCACE,kBAAC,EAAD,CAAQxD,KAAMA,KAEhB,iCACE,kBAAC,EAAD,CAAWoB,KAAMpB,EAAKoB,QAExB,+BACGpB,EAAK2D,QACJ,kBAAC,EAAD,CAAQpC,KAAMvB,EAAK2D,OAAQhC,SAAUc,EAASO,kBAGlD,gCACGhD,EAAK4D,OAAS,kBAAC,EAAD,CAAOrC,KAAMvB,EAAK4D,QAChC5D,EAAK+B,SAAW,kBAAC,EAAD,CAAcA,QAAS/B,EAAK+B,UAC5C/B,EAAKmC,YAAc,kBAAC,EAAD,CAAYA,WAAYnC,EAAKmC,gB,yBC9C5C0B,EAAS,uCAAG,4BAAAlE,EAAA,sEACS,kCADT,cACjBF,EADiB,OACyCqE,QADzC,kBAGhBrE,GAHgB,2CAAH,qDAMTsE,EAAQ,uCAAG,WAAOlF,GAAP,eAAAc,EAAA,sEACI,OAAO,YAAmBd,EAA1B,UADJ,cAChBmB,EADgB,OAC0C8D,QAD1C,kBAGf9D,GAHe,2CAAH,sDCHRgE,EAAkC,WAAO,IAAD,EACzBV,mBAAoB,IADK,mBAC5C7D,EAD4C,KACrCwE,EADqC,KASnD,OANAC,qBAAU,WACRL,IAAYrF,MAAK,SAAC2F,GAChBF,EAASE,QAEV,IAEI,kBAAC,EAAD,CAAU1E,MAAOA,KCJb2E,EAA8B,WAAO,IAAD,EACrBd,qBADqB,mBACtCtD,EADsC,KAChCqE,EADgC,KAErCxF,EAAOyF,cAAPzF,GAQR,OANAqF,qBAAU,WACNH,EAASlF,GAAIL,MAAK,SAAC2F,GACfE,EAAQF,QAEb,CAACtF,IAEG,oCAAGmB,GAAQ,kBAAC,EAAD,CAAMA,KAAMA,MCdrBuE,EAAuB,kBAClC,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCFOC,EANW,kBACxB,kBAAC,IAAD,KACE,kBAAC,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9G,MAAK,SAAA+G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.97198832.chunk.js","sourcesContent":["var map = {\n\t\"./debug.json\": [\n\t\t134,\n\t\t4\n\t],\n\t\"./lluba.json\": [\n\t\t135,\n\t\t5\n\t],\n\t\"./morenita.json\": [\n\t\t136,\n\t\t6\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 132;\nmodule.exports = webpackAsyncContext;","import React from \"react\";\nimport { Navbar } from \"./\";\n\nexport const Layout: React.FC<React.PropsWithChildren<{}>> = ({ children }) => (\n  <div>\n    <Navbar />\n    {children}\n  </div>\n);\n","import {\n  Navbar as BaseNavbar,\n  NavbarGroup,\n  NavbarHeading,\n} from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Navbar: React.FC<{}> = () => {\n  return (\n    <BaseNavbar fixedToTop>\n      <NavbarGroup>\n        <NavbarHeading>\n          <Link to=\"/\">Playbook </Link>\n        </NavbarHeading>\n      </NavbarGroup>\n    </BaseNavbar>\n  );\n};\n","import React from \"react\";\nimport { SongItems } from \"../containers/types\";\nimport { UL } from \"@blueprintjs/core\";\nimport { Link } from \"react-router-dom\";\n\nexport const SongList: React.FC<{ songs: SongItems }> = ({ songs }) => {\n  return (\n    <UL>\n      {songs\n        .sort((a, b) => a.title.localeCompare(b.artist))\n        .map((song, key) => (\n          <li key={key}>\n            <Link to={`song/${song.id}`}>{song.title}</Link>\n          </li>\n        ))}\n    </UL>\n  );\n};\n","import { H2, Tag } from \"@blueprintjs/core\";\nimport React from \"react\";\nimport { Song } from \"../containers/types\";\n\ninterface HeaderProps {\n  song: Song;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ song }) => (\n  <>\n    <H2>\n      {song.title} - {song.artist}\n    </H2>\n    {song.capo && <Tag>Capo {song.capo}</Tag>}\n  </>\n);\n","import React from \"react\";\nimport { Bar as BarType } from \"../containers/types\";\n\ninterface BarProps {\n  bar: BarType;\n  defaultBeats: number;\n}\n\nexport const Bar: React.FC<BarProps> = ({ bar, defaultBeats }) => {\n  let chords: Array<JSX.Element> = [];\n  let starts = 0;\n\n  bar.chords.forEach((chord) => {\n    chords.push(\n      <div\n        key={starts}\n        className={`bar-chord starts-${starts} beats-${chord.beats}`}\n      >\n        <span className=\"chord\">{chord.name}</span>\n      </div>\n    );\n    starts += chord.beats;\n  });\n\n  return <div className={`bar bar-${bar.beats ?? defaultBeats}`}>{chords}</div>;\n};\n\nexport default Bar;\n","import React from \"react\";\nimport { Phrase as PhraseType } from \"../containers/types\";\nimport { H3 } from \"@blueprintjs/core\";\nimport Bar from \"./Bar\";\n\ninterface PhraseProps {\n  phrase: PhraseType;\n}\n\nexport const Phrase: React.FC<PhraseProps> = ({ phrase }) => (\n  <>\n    <H3>{phrase.name}</H3>\n    <div className=\"phrase\">\n      {phrase.bars.map(function (bar, index) {\n        return <Bar defaultBeats={phrase.beats} bar={bar} key={index} />;\n      })}\n    </div>\n  </>\n);\n","import React from \"react\";\nimport { Grid } from \"../containers/types\";\nimport { Phrase } from \"./Phrase\";\n\ninterface ChordGridProps {\n  grid: Grid;\n}\n\nexport const ChordGrid: React.FC<ChordGridProps> = ({ grid }) => (\n  <div className=\"chord-grid\">\n    {grid.phrases.map((phrase, key) => (\n      <Phrase phrase={phrase} key={key} />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport { H3 } from \"@blueprintjs/core\";\n\ninterface NotesProps {\n  text: string[];\n}\n\nexport const Notes: React.FC<NotesProps> = ({ text }) => (\n  <div className=\"notes\">\n    <H3>Notes</H3>\n    {text.map((line, index) => (\n      <React.Fragment key={index}>\n        {line}\n        <br />\n      </React.Fragment>\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport { H3 } from \"@blueprintjs/core\";\nimport \"./Lyrics.scss\";\n\ninterface LyricsProps {\n  text: Array<string[]>;\n  fontSize: number;\n}\n\nexport const Lyrics: React.FC<LyricsProps> = ({ text, fontSize }) => (\n  <div>\n    <H3>Paroles</H3>\n    <div className=\"lyrics\" style={{ fontSize: `${fontSize}px` }}>\n      {text.map((paragraphe, index) => (\n        <p key={index}>\n          {paragraphe.map((line, index) => (\n            <React.Fragment key={index}>\n              {line}\n              <br />\n            </React.Fragment>\n          ))}\n        </p>\n      ))}\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { H3 } from \"@blueprintjs/core\";\nimport { Schema } from \"../containers/types\";\n\ninterface ChordSchemasProps {\n  schemas: Schema[];\n}\n\nexport const ChordSchemas: React.FC<ChordSchemasProps> = ({ schemas }) => (\n  <div>\n    <H3>Accords</H3>\n    <div>\n      {schemas.map((schema, index) => (\n        <div key={index}>\n          {schema.name} : {schema.frets}\n        </div>\n      ))}\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { H3 } from \"@blueprintjs/core\";\n\ninterface ReferencesProps {\n  references: string[];\n}\n\nexport const References: React.FC<ReferencesProps> = ({ references }) => (\n  <div>\n    <H3>Références</H3>\n    <ul>\n      {references.map(function (reference, index) {\n        return (\n          <li key={index}>\n            <a href={reference} target=\"_blank\" rel=\"noopener noreferrer\">\n              {reference}\n            </a>\n          </li>\n        );\n      })}\n    </ul>\n  </div>\n);\n","import React from \"react\";\nimport {\n  Popover,\n  Position,\n  Button,\n  ButtonGroup,\n  Callout,\n} from \"@blueprintjs/core\";\nimport { SongSettings } from \"./Song\";\n\ninterface ActionsProps {\n  settings: SongSettings;\n  onUpdate: (settings: SongSettings) => void;\n}\n\nexport const Actions: React.FC<ActionsProps> = ({ settings, onUpdate }) => {\n  const menu = (\n    <Callout title=\"Configuration\">\n      <ButtonGroup>\n        <Button\n          icon=\"minus\"\n          minimal\n          small\n          onClick={() =>\n            onUpdate({\n              ...settings,\n              lyricsFontSize: settings.lyricsFontSize - 1,\n            })\n          }\n        />\n        <Button\n          icon=\"plus\"\n          minimal\n          small\n          onClick={() =>\n            onUpdate({\n              ...settings,\n              lyricsFontSize: settings.lyricsFontSize + 1,\n            })\n          }\n        />\n      </ButtonGroup>\n      Taille paroles\n    </Callout>\n  );\n\n  return (\n    <Popover content={menu} position={Position.LEFT_TOP}>\n      <Button minimal icon=\"cog\" />\n    </Popover>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Song as SongType } from \"../containers/types\";\nimport { Header } from \"./Header\";\nimport { ChordGrid } from \"./ChordGrid\";\nimport { Notes } from \"./Notes\";\nimport { Lyrics } from \"./Lyrics\";\nimport { ChordSchemas } from \"./ChordSchemas\";\nimport { References } from \"./References\";\nimport \"./Song.scss\";\nimport { Actions } from \"./Actions\";\n\ninterface SongProps {\n  song: SongType;\n}\n\nexport interface SongSettings {\n  lyricsFontSize: number;\n}\n\nexport const Song: React.FC<SongProps> = ({ song }) => {\n  const [settings, setSettings] = useState<SongSettings>({\n    lyricsFontSize: 14,\n  });\n\n  const onUpdate = (newSettings: SongSettings) => {\n    console.log(settings.lyricsFontSize);\n    setSettings(newSettings);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"song__actions\">\n        <Actions settings={settings} onUpdate={onUpdate} />\n      </div>\n      <header>\n        <Header song={song} />\n      </header>\n      <article>\n        <ChordGrid grid={song.grid} />\n      </article>\n      <aside>\n        {song.lyrics && (\n          <Lyrics text={song.lyrics} fontSize={settings.lyricsFontSize} />\n        )}\n      </aside>\n      <footer>\n        {song.notes && <Notes text={song.notes} />}\n        {song.schemas && <ChordSchemas schemas={song.schemas} />}\n        {song.references && <References references={song.references} />}\n      </footer>\n    </div>\n  );\n};\n","import { SongItems, Song } from \"./types\";\n\nexport const loadSongs = async (): Promise<SongItems> => {\n  const songs: SongItems = (await import(`./../data/songs.json`)).default;\n\n  return songs;\n};\n\nexport const loadSong = async (id: string): Promise<Song> => {\n  const song: Song = (await import(`./../data/songs/${id}.json`)).default;\n\n  return song;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { loadSongs } from \"./actions\";\nimport { SongItems } from \"./types\";\nimport { SongList } from \"../components\";\n\nexport const SongListContainer: React.FC<{}> = () => {\n  const [songs, setSongs] = useState<SongItems>([]);\n\n  useEffect(() => {\n    loadSongs().then((values: SongItems) => {\n      setSongs(values);\n    });\n  }, []);\n\n  return <SongList songs={songs} />;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { loadSong } from \"./actions\";\nimport { Song as ISong } from \"./types\";\nimport { useParams } from \"react-router-dom\";\nimport { Song } from \"../components\";\n\ninterface SongContainerParams {\n    id: string;\n}\n\nexport const SongContainer: React.FC<{}> = () => {\n    const [song, setSong] = useState<ISong>();\n    const { id } = useParams<SongContainerParams>();\n\n    useEffect(() => {\n        loadSong(id).then((values: ISong) => {\n            setSong(values);\n        });\n    }, [id]);\n\n    return <>{song && <Song song={song} />}</>;\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Layout } from \"./components\";\nimport { SongListContainer } from \"./containers/SongListContainer\";\nimport { SongContainer } from \"./containers/SongContainer\";\n\nexport const Router: React.FC<{}> = () => (\n  <Layout>\n    <Switch>\n      <Route path=\"/song/:id\">\n        <SongContainer />\n      </Route>\n      <Route path=\"/\">\n        <SongListContainer />\n      </Route>\n    </Switch>\n  </Layout>\n);\n","import React from \"react\";\nimport \"./App.scss\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Router } from \"./Router\";\n\nconst App: React.FC<{}> = () => (\n  <HashRouter>\n    <Router />\n  </HashRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}